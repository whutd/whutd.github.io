<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on whutd blog</title>
    <link>http://localhost:1313/docs/</link>
    <description>Recent content in Docs on whutd blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Feb 2025 20:27:39 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【字符串】KMP算法</title>
      <link>http://localhost:1313/docs/%E5%AD%97%E7%AC%A6%E4%B8%B2kmp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 18 Feb 2025 20:27:39 +0800</pubDate>
      <guid>http://localhost:1313/docs/%E5%AD%97%E7%AC%A6%E4%B8%B2kmp%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h2 id=&#34;作用&#34;&gt;作用 &lt;a href=&#34;#%e4%bd%9c%e7%94%a8&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用于&lt;strong&gt;快速&lt;/strong&gt;快速查找模式串（子串）&lt;code&gt;pattern&lt;/code&gt;在主串（母串）&lt;code&gt;main&lt;/code&gt;中出现的位置。&lt;/p&gt;&#xA;&lt;p&gt;注意，此处是匹配子串的要求，而子串是连续的&lt;/p&gt;&#xA;&lt;h2 id=&#34;原理&#34;&gt;原理 &lt;a href=&#34;#%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h4 id=&#34;前置知识前缀函数&#34;&gt;前置知识：前缀函数 &lt;a href=&#34;#%e5%89%8d%e7%bd%ae%e7%9f%a5%e8%af%86%e5%89%8d%e7%bc%80%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;对于一个字符串，将它 &lt;em&gt;不包含自身的前后缀（称为真前后缀）&lt;/em&gt; 罗列出来，找到匹配的前后缀，取它们长度的最大值称之为 &lt;em&gt;最长匹配真前后缀的长度&lt;/em&gt;，此过程记为函数$π$&lt;/p&gt;&#xA;&lt;p&gt;例如：对于字符串 $s=$&lt;code&gt;ATAATA&lt;/code&gt;&#xA;含有真前缀为&lt;code&gt;ATAAT&lt;/code&gt; &lt;code&gt;ATAA&lt;/code&gt; &lt;code&gt;ATA&lt;/code&gt; &lt;code&gt;AT&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; &lt;code&gt;∅&lt;/code&gt;&#xA;含有真后缀为&lt;code&gt;TAATA&lt;/code&gt; &lt;code&gt;AATA&lt;/code&gt; &lt;code&gt;ATA&lt;/code&gt; &lt;code&gt;TA&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; &lt;code&gt;∅&lt;/code&gt;&#xA;匹配的前后缀有&lt;code&gt;ATA&lt;/code&gt;，&lt;code&gt;A&lt;/code&gt;，&lt;code&gt;∅&lt;/code&gt;，长度分别为$3、1、0$&#xA;则字符串&lt;code&gt;ATAATA&lt;/code&gt;的$π$值为$3$&lt;/p&gt;&#xA;&lt;p&gt;然后将字符串的所有非空前缀列出来，从$0$开始编号，并计算这些前缀的$π$值，将它们存在一个数组里，这就是&lt;strong&gt;前缀函数&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;字符串&lt;code&gt;ATAATA&lt;/code&gt;的前缀函数数组如下&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;下标 $i$&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;0&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;1&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;2&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;3&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;4&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;5&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;前缀字符串&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;AT&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;ATA&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;ATAA&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;ATAAT&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&lt;code&gt;ATAATA&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$π[i]$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$0$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$0$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$1$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$1$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$2$&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$3$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;即$π[i]$就是子串 $s[0&amp;hellip;i]$ 最长匹配真前后缀的长度&lt;/p&gt;&#xA;&lt;h4 id=&#34;kmp原理&#34;&gt;kmp原理 &lt;a href=&#34;#kmp%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;如果将主串&lt;code&gt;main&lt;/code&gt;和模式串&lt;code&gt;pattern&lt;/code&gt;以一个特殊字符&lt;code&gt;#&lt;/code&gt;链接在一起&#xA;并计算这个字符串的前缀函数，如果存在$π[i]$等于&lt;code&gt;pattern&lt;/code&gt;的长度，则说明找到了和模式串匹配的子串，且长度为$π[i]$的后缀字符串与&lt;code&gt;pattern&lt;/code&gt;完全相同。&lt;/p&gt;&#xA;&lt;p&gt;设&lt;code&gt;main&lt;/code&gt;=&lt;code&gt;AGCATAATAATTAA&lt;/code&gt;，&lt;code&gt;pattern&lt;/code&gt;=&lt;code&gt;ATAATA&lt;/code&gt;，则合并串&lt;code&gt;s&lt;/code&gt;=&lt;code&gt;ATAATA#AGCATAATAATTAA&lt;/code&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;合并串&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;T&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;T&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;#&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;G&lt;/th&gt;&#xA;          &lt;th&gt;C&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;T&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;T&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;T&lt;/th&gt;&#xA;          &lt;th&gt;T&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;          &lt;th&gt;A&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$i$&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;6&lt;/td&gt;&#xA;          &lt;td&gt;7&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;9&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;          &lt;td&gt;11&lt;/td&gt;&#xA;          &lt;td&gt;12&lt;/td&gt;&#xA;          &lt;td&gt;13&lt;/td&gt;&#xA;          &lt;td&gt;14&lt;/td&gt;&#xA;          &lt;td&gt;15&lt;/td&gt;&#xA;          &lt;td&gt;16&lt;/td&gt;&#xA;          &lt;td&gt;17&lt;/td&gt;&#xA;          &lt;td&gt;18&lt;/td&gt;&#xA;          &lt;td&gt;19&lt;/td&gt;&#xA;          &lt;td&gt;20&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;$π[i]$&lt;/td&gt;&#xA;          &lt;td&gt;$0$&lt;/td&gt;&#xA;          &lt;td&gt;$0$&lt;/td&gt;&#xA;          &lt;td&gt;$1$&lt;/td&gt;&#xA;          &lt;td&gt;$1$&lt;/td&gt;&#xA;          &lt;td&gt;$2$&lt;/td&gt;&#xA;          &lt;td&gt;$3$&lt;/td&gt;&#xA;          &lt;td&gt;$0$&lt;/td&gt;&#xA;          &lt;td&gt;$1$&lt;/td&gt;&#xA;          &lt;td&gt;$0$&lt;/td&gt;&#xA;          &lt;td&gt;$0$&lt;/td&gt;&#xA;          &lt;td&gt;$1$&lt;/td&gt;&#xA;          &lt;td&gt;$2$&lt;/td&gt;&#xA;          &lt;td&gt;$3$&lt;/td&gt;&#xA;          &lt;td&gt;$4$&lt;/td&gt;&#xA;          &lt;td&gt;$5$&lt;/td&gt;&#xA;          &lt;td&gt;$6$&lt;/td&gt;&#xA;          &lt;td&gt;$4$&lt;/td&gt;&#xA;          &lt;td&gt;$5$&lt;/td&gt;&#xA;          &lt;td&gt;$0$&lt;/td&gt;&#xA;          &lt;td&gt;$1$&lt;/td&gt;&#xA;          &lt;td&gt;$1$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;可以看到$π[15]=6$，的确$s[0&amp;hellip;i]=$&lt;code&gt;ATAATA#AGCATAATA&lt;/code&gt;,前六个字符（即模式串）与后六个字符（主串的一个子串）完全相同，即在主串中找到了模式串。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Example Page</title>
      <link>http://localhost:1313/docs/example-page/</link>
      <pubDate>Tue, 18 Feb 2025 20:27:39 +0800</pubDate>
      <guid>http://localhost:1313/docs/example-page/</guid>
      <description>&lt;p&gt;abababba&lt;/p&gt;</description>
    </item>
    <item>
      <title>BigIntcalc</title>
      <link>http://localhost:1313/docs/bigintcalc/</link>
      <pubDate>Thu, 12 Dec 2024 00:35:34 +0000</pubDate>
      <guid>http://localhost:1313/docs/bigintcalc/</guid>
      <description>&lt;h1 id=&#34;大数乘法优化的几点方法&#34;&gt;大数乘法优化的几点方法 &lt;a href=&#34;#%e5%a4%a7%e6%95%b0%e4%b9%98%e6%b3%95%e4%bc%98%e5%8c%96%e7%9a%84%e5%87%a0%e7%82%b9%e6%96%b9%e6%b3%95&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;hr&gt;&#xA;&lt;p&gt;悲剧地发现看不懂前面的推文后立志要写出只要是上过课的都能懂的文章。请懂的同学通过目录去了解自己有兴趣的内容，或者快速划过这篇推文。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h2 id=&#34;空间优化&#34;&gt;空间优化 &lt;a href=&#34;#%e7%a9%ba%e9%97%b4%e4%bc%98%e5%8c%96&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h3 id=&#34;压位&#34;&gt;压位 &lt;a href=&#34;#%e5%8e%8b%e4%bd%8d&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在获取大数字符串后需要以转换为整形存储，然而，如果数组里只存了1个数字未免有点浪费，所以我们可以进行压位操作，多存几个数字。以10进制存储的大数乘法运算一般压4位。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要注意的是，在例如 77x130=10010 的计算中，积在数组中的存储为[1，10]，输出结果就变成了110.为了避免这种结果，我们需要对输出格式进行一些处理：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int BigNumber_print(int*c,int top)//c为逆序存放乘积的数组，top为最高位下标&#xA;{&#xA;  printf(&amp;#34;%d&amp;#34;,c[top]);//最高位所在不能补零输出&#xA;  for(int i=top-1;i&amp;gt;=0;i--)&#xA;  {&#xA;    printf(&amp;#34;%04d&amp;#34;,c[i]);//将结果右对齐输出，结果补零，效果如：10-&amp;gt;0010&#xA;  }&#xA;  return 0;&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;事实上，为了全bit存储以及后续部分算法的使用，我们可以将大数以2进制存储，这就需要2个将10进制转化为2进制的输入函数与将2进制转化为10进制的输出函数。这里不多做赘述。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;h2 id=&#34;时间优化&#34;&gt;时间优化 &lt;a href=&#34;#%e6%97%b6%e9%97%b4%e4%bc%98%e5%8c%96&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h3 id=&#34;karatsuba算法优化&#34;&gt;Karatsuba算法优化 &lt;a href=&#34;#karatsuba%e7%ae%97%e6%b3%95%e4%bc%98%e5%8c%96&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h4 id=&#34;先来做道竖式计算吧&#34;&gt;先来做道竖式计算吧 &lt;a href=&#34;#%e5%85%88%e6%9d%a5%e5%81%9a%e9%81%93%e7%ab%96%e5%bc%8f%e8%ae%a1%e7%ae%97%e5%90%a7&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;相信大家都做过这样的乘法列式计算题。&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;    &#xA;      &lt;img src=&#34;http://localhost:1313/t0125d0d63253012912_5241267844418668949.jpg&#34; alt=&#34;竖式乘法计算&#34; width=&#34;400&#34; height=&#34;267&#34; loading=&#34;lazy&#34;&gt;&#xA;    &#xA;  &#xA;&#xA;大数乘法的基本方法就是模拟手算乘法，简单，好想，空间复杂度小，时间复杂度为$O(n^2)$。&#xA;这个过程可以理解为：&#xA;($24\times10 + 0\times1) \times (3\times10 + 6\times1 ) = 72\times100 + (144+0)\times10+(0+6)\times1$&#xA;需要计算的乘法有：24x3、24x6、0x3、0x6&lt;/p&gt;&#xA;&lt;p&gt;如果把上面的过程抽象为字符形式：&#xA;($a \times x+b$)($c \times x+d$)=$ac · x^2+ (ad+bc) \times x+bd$&#xA;那么为了得出结果，我们需要知道ac、ad、bc、bd这4个乘法运算结果。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;关键的地方到了。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;易知：(a-b)(c-d)=ac+bd-(ad+bc)，若用ac+bd-(a-b)(c-d)来表示(ad+bc)的话，只需要计算3个乘法运算结果：(a-b)(c-d)、ac、bd。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h4 id=&#34;karatsuba算法的具体步骤&#34;&gt;Karatsuba算法的具体步骤 &lt;a href=&#34;#karatsuba%e7%ae%97%e6%b3%95%e7%9a%84%e5%85%b7%e4%bd%93%e6%ad%a5%e9%aa%a4&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h4&gt;理解了上面的内容后，下面介绍Karatsuba算法的具体步骤：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;假设2个大数x、y的长度分别为p、q;&lt;/li&gt;&#xA;&lt;li&gt;取$n=min\lbrace p,q \rbrace$;&lt;/li&gt;&#xA;&lt;li&gt;将x、y表示为：$x=a·10^{n/2} + b；y=c·10^{n/2} + d$；&lt;/li&gt;&#xA;&lt;li&gt;计算$(a-b)(c-d)、ac、bd$；&lt;/li&gt;&#xA;&lt;li&gt;结果为：$ac·10^n+[ac+bd-(a-b)(c-d)]·10^{n/2}+bd$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;h4 id=&#34;karatsuba算法的程序实现&#34;&gt;Karatsuba算法的程序实现 &lt;a href=&#34;#karatsuba%e7%ae%97%e6%b3%95%e7%9a%84%e7%a8%8b%e5%ba%8f%e5%ae%9e%e7%8e%b0&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;该算法可通过递归实现，需要提前写好大数加减算法。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/arp%E6%94%BB%E5%87%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/arp%E6%94%BB%E5%87%BB/</guid>
      <description>&lt;h1 id=&#34;arp攻击&#34;&gt;ARP攻击 &lt;a href=&#34;#arp%e6%94%bb%e5%87%bb&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;0x00-osi模型&#34;&gt;0x00 OSI模型 &lt;a href=&#34;#0x00-osi%e6%a8%a1%e5%9e%8b&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在开放系统互连（OSI）参考模型中，网络工作被划分为七个层次。各层之间并不直接进行交互，而是仅通过层接口（Layer Interface）实现彼此间的通信。&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;IP地址在第三层（网络层）, MAC地址在第二层（数据链路层）。协议在发送数据包时，首先要封装第三层（IP地址）和第二层 （MAC地址）的报头, 但协议只知道目的节点的IP地址，不知道其物理地址，又不能跨第二、三层，所以得用ARP的服务拿到MAC地址。&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x01-arp协议&#34;&gt;0x01 ARP协议 &lt;a href=&#34;#0x01-arp%e5%8d%8f%e8%ae%ae&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。&lt;/p&gt;&#xA;&lt;h2 id=&#34;0x02-arp攻击&#34;&gt;0x02 ARP攻击 &lt;a href=&#34;#0x02-arp%e6%94%bb%e5%87%bb&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;1表现&#34;&gt;1.表现 &lt;a href=&#34;#1%e8%a1%a8%e7%8e%b0&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一般情况下，受到ARP攻击的计算机会出现两种现象：&lt;br&gt;&#xA;不断弹出“本机的XXX段硬件地址与网络中的XXX段地址冲突”的对话框。&lt;br&gt;&#xA;计算机不能正常上网，出现网络中断的症状。&lt;br&gt;&#xA;除此之外，用户可能还会遭遇信息泄露的情况。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2原理&#34;&gt;2.原理 &lt;a href=&#34;#2%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ARP协议是TCP/IP协议组的一个协议，这个协议是建立在局域网上主机相互信任的基础上的，局域网中的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性并直接将其记入本机ARP缓存。ARP缓存表采用的是机械制原理，如果表中的某一列长时间不使用，就会被删除。也就是说ARP的缓存表是可以被更改的。表中的IP地址和MAC地址也是随时可以修改，这样在局域网中很容易被ARP欺骗。&lt;/p&gt;&#xA;&lt;p&gt;在网络通信过程中，当客户机向外部网络发送数据包时，首先会借助ARP协议来获取网关的MAC地址。之后，客户机会将 IP 数据包封装在以太网帧中，并发送给该网关，由网关负责后续的转发工作。&lt;br&gt;&#xA;然而，网络环境并非绝对安全。当有恶意人员接入网络后，会对网络中的 ARP 流量进行监听。由于 ARP 地址解析请求采用广播的方式发送，网络中的所有参与者都能够接收到该请求，黑客自然也不例外。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;    &#xA;      &lt;img src=&#34;http://localhost:1313/dfee62b16526cbf7fa8a35d0fc8dfe290c188432_11414023627677143472.png&#34; alt=&#34;&#34; width=&#34;1500&#34; height=&#34;988&#34; loading=&#34;lazy&#34;&gt;&#xA;    &#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;以 PC 解析网关 192.168.50.1 的 MAC 地址这一过程为例。当黑客嗅探到 ARP 请求后，可能会实施恶意行为。黑客会伪装成网关，伪造 ARP 应答信息来欺骗 PC。PC 在接收到 ARP 应答后，会将应答结果存储在 ARP 缓存中。由于 ARP 协议缺乏有效的校验机制，PC 很容易受到黑客的欺骗。需要注意的是，网关也会向 PC 发送真实的 ARP 应答。在此情况下，PC 会依据系统协议栈的规则来采信应答信息，而系统协议栈通常以最新接收到的应答作为有效信息。&lt;br&gt;&#xA;黑客在嗅探到 ARP 请求后，会持续发送虚假应答，总有一个虚假应答能够覆盖网关发送的真实应答，从而进入 PC 的 ARP 缓存表。这种攻击方式被称为 ARP 泛洪（ARP Flooding）。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/godan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/godan/</guid>
      <description>&lt;h1 id=&#34;xss-漏洞分析与攻防技术&#34;&gt;XSS 漏洞分析与攻防技术 &lt;a href=&#34;#xss-%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%e4%b8%8e%e6%94%bb%e9%98%b2%e6%8a%80%e6%9c%af&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;1-漏洞分析xss-漏洞的成因及攻击方式&#34;&gt;1. 漏洞分析：XSS 漏洞的成因及攻击方式 &lt;a href=&#34;#1-%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90xss-%e6%bc%8f%e6%b4%9e%e7%9a%84%e6%88%90%e5%9b%a0%e5%8f%8a%e6%94%bb%e5%87%bb%e6%96%b9%e5%bc%8f&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;xss-漏洞的成因&#34;&gt;XSS 漏洞的成因 &lt;a href=&#34;#xss-%e6%bc%8f%e6%b4%9e%e7%9a%84%e6%88%90%e5%9b%a0&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;XSS（Cross-Site Scripting）漏洞通常发生在 Web 应用程序未对用户输入进行充分的过滤或转义时。攻击者通过将恶意 JavaScript 代码嵌入到 Web 页面中，利用页面没有正确处理用户输入来执行恶意脚本，最终达到窃取用户信息、劫持会话、篡改页面内容等目的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;xss-漏洞的主要类型&#34;&gt;XSS 漏洞的主要类型 &lt;a href=&#34;#xss-%e6%bc%8f%e6%b4%9e%e7%9a%84%e4%b8%bb%e8%a6%81%e7%b1%bb%e5%9e%8b&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;反射型 XSS（Reflected XSS）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;攻击者将恶意脚本嵌入到 URL 或表单字段中，当用户访问该 URL 时，恶意脚本会立即在页面中反射执行。&lt;/li&gt;&#xA;&lt;li&gt;示例：&lt;code&gt;http://example.com/search?q=&amp;lt;script&amp;gt;alert(&#39;XSS&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;存储型 XSS（Stored XSS）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;攻击者将恶意脚本存储在服务器端（如论坛评论区、用户帖子等），当其他用户访问存储的内容时，恶意脚本被执行。&lt;/li&gt;&#xA;&lt;li&gt;示例：攻击者在评论区提交 &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;XSS&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;，其他用户查看该评论时脚本执行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;DOM 型 XSS（DOM-based XSS）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;攻击者通过操作网页上的 DOM 元素来触发脚本执行，而不是依赖服务器的响应。&lt;/li&gt;&#xA;&lt;li&gt;示例：通过修改 &lt;code&gt;window.location&lt;/code&gt; 或 &lt;code&gt;document.location&lt;/code&gt; 注入恶意代码。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;攻击方式&#34;&gt;攻击方式 &lt;a href=&#34;#%e6%94%bb%e5%87%bb%e6%96%b9%e5%bc%8f&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;XSS 攻击的目标通常是：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;窃取 Cookies&lt;/strong&gt;：攻击者通过脚本获取用户的 cookie 信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;窃取会话&lt;/strong&gt;：攻击者窃取会话标识符（如 Token），从而劫持用户会话。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;篡改页面内容&lt;/strong&gt;：修改页面 DOM，诱导用户点击恶意链接或输入信息。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;劫持用户输入&lt;/strong&gt;：通过恶意脚本记录用户的键盘输入或篡改表单数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-攻防技术介绍&#34;&gt;2. 攻防技术介绍 &lt;a href=&#34;#2-%e6%94%bb%e9%98%b2%e6%8a%80%e6%9c%af%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;攻击手段&#34;&gt;攻击手段 &lt;a href=&#34;#%e6%94%bb%e5%87%bb%e6%89%8b%e6%ae%b5&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Payload 编写技巧&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/rsa%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/rsa%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h3 id=&#34;rsa算法讲解&#34;&gt;RSA算法讲解 &lt;a href=&#34;#rsa%e7%ae%97%e6%b3%95%e8%ae%b2%e8%a7%a3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;一、生成密钥的基本步骤&lt;/strong&gt;&#xA;$\textcircled {1}$ 寻找两个质数&lt;code&gt;p&lt;/code&gt; &lt;code&gt;q&lt;/code&gt;&#xA;$\textcircled {2}$ 两个质数相乘计算&lt;code&gt;N&lt;/code&gt;&#xA;&lt;code&gt;N = p * q&lt;/code&gt;&#xA;$\textcircled {3}$ 使用欧拉函数计算&lt;code&gt;T&lt;/code&gt;&#xA;&lt;code&gt;T = (p - 1)*(q - 1)&lt;/code&gt;&#xA;$\textcircled {4}$ 选择合适的公钥&lt;code&gt;E&lt;/code&gt; &lt;strong&gt;(注意：&lt;code&gt;E&lt;/code&gt;应该是一个质数，且不是&lt;code&gt;T&lt;/code&gt;的因子)&lt;/strong&gt;&#xA;$\textcircled {5}$ 计算生成私钥&lt;code&gt;D&lt;/code&gt; , 其中&lt;code&gt;D&lt;/code&gt;应当满足：&lt;code&gt;（D * E）% T = 1&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;经过上述操作，我们将得到&lt;strong&gt;公钥对&lt;/strong&gt;&lt;code&gt;（N, E）&lt;/code&gt;与&lt;strong&gt;私钥对&lt;/strong&gt;&lt;code&gt;(N, D)&lt;/code&gt;,其中我们采用公钥对对明文进行加密，用私钥对进行解密，加密与解密如下：&#xA;$$&#xA;明文^E % N = 密文\&#xA;密文^D % N = 明文\&#xA;$$&#xA;接下来我将具体讲解每个步骤的原理。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;二、寻找质数&lt;code&gt;p&lt;/code&gt; &lt;code&gt;q&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;随机数生成&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;random_num&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;srand&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;(NULL));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bai_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//int p = (rand() % (max_t - min_t + 1)) + min_t;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; two_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rad_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bai_num &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; two_num;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rad_num;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;这里我们采用C语言的&lt;code&gt;rand()&lt;/code&gt;函数，并且以&lt;strong&gt;时间为种子&lt;/strong&gt;生成随机数，注意到这里我&lt;strong&gt;生成了两个随机数&lt;/strong&gt;，原因是：&#xA;为了保证加密的安全性，我们通常选取的两个质数一般会比较大，这里我选择的是五位质数（实际上会更大），而计算机以时间种子在生成较大随机数时，&lt;strong&gt;很难保证生成的随机数的均匀分布&lt;/strong&gt;（&lt;strong&gt;即每次生成的大随机数很接近&lt;/strong&gt;），因此我将五位数的前三位和后两位&lt;strong&gt;分开随机生成&lt;/strong&gt;，可以确保生成的随机数在所给区间里的均匀分配&lt;/li&gt;&#xA;&lt;li&gt;判断生成的随机数是不是质数&#xA;这里我们采用&lt;code&gt;Miller Rabin素性检验&lt;/code&gt;,主要原理是利用了质数必然满足费马小定理，也即&lt;strong&gt;质数一定满足费马小定理，但是满足费马小定理的可能是伪素数&lt;/strong&gt;，但我们可以通过&lt;strong&gt;多次检验&lt;/strong&gt;来降低出错概率&#xA;参考文献： &lt;a href=&#34;https://zhuanlan.zhihu.com/p/349360074&#34; rel=&#34;external&#34; target=&#34;_blank&#34;&gt;Miller Rabin素性检验&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 24 24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z&#34;/&gt;&lt;/svg&gt;&lt;/a&gt;&#xA;代码如下：&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;miller_rabin_test&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 处理小数和偶数的情况&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 将 n - 1 表示为 d * 2^r&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;d &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;r&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 执行 k 次测试&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; k; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mod_pow&lt;/span&gt;(a, d, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mod_pow&lt;/span&gt;(x, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, n);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mod_pow&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; base, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; exp, &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; mod) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (exp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (exp &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;&#x9;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (result &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; base) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;exp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; exp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#x9;base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (base &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; base) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;通过以上办法我们成功找到了两个合适的质数&lt;code&gt;p&lt;/code&gt; &lt;code&gt;q&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/whutd%E6%8E%A8%E6%96%870x00-----%E6%BC%AB%E8%B0%88sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/whutd%E6%8E%A8%E6%96%870x00-----%E6%BC%AB%E8%B0%88sql/</guid>
      <description>&lt;h1 id=&#34;漫谈sql&#34;&gt;漫谈SQL &lt;a href=&#34;#%e6%bc%ab%e8%b0%88sql&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;0x00-sql是什么有什么用&#34;&gt;0x00 SQL是什么？有什么用？ &lt;a href=&#34;#0x00-sql%e6%98%af%e4%bb%80%e4%b9%88%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要谈谈SQL的定性，那我们就必需同时提到另一个概念”数据库“；当今时代数据爆炸，面对巨额的数据，我们创造了数据库这个在线的结构来处理，管理这些数据。而SQL就是一种结构化的数据库操作语言，它使得我们能够高效，准确的获取，修改，操作数据库中我们需要的数据。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;0x01sql基本处理与对应语法&#34;&gt;0x01：SQL基本处理与对应语法 &lt;a href=&#34;#0x01sql%e5%9f%ba%e6%9c%ac%e5%a4%84%e7%90%86%e4%b8%8e%e5%af%b9%e5%ba%94%e8%af%ad%e6%b3%95&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;从上一个部分，我们可以把SQL分成以下几个部分&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;1.DDL(Data Definition Language)数据定义语言，用来定义数据库对象(库 表 列&amp;hellip;)&lt;/p&gt;&#xA;&lt;p&gt;2.DML(Data Manipulation Language)数据操作语言，用来操作数据库中的数据&lt;/p&gt;&#xA;&lt;p&gt;3.DCL(Data Control Language)数据控制语言，定义数据权限与安全问题&lt;/p&gt;&#xA;&lt;p&gt;4.DQL（Data Query Language）数据查询语言，查询数据&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;我们一个一个来讲讲基本语法&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;以下语法句子中关键字均采取大写处理&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1ddl&#34;&gt;1.DDL &lt;a href=&#34;#1ddl&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;库操作&#34;&gt;库操作 &lt;a href=&#34;#%e5%ba%93%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;创建数据库：&lt;code&gt;CREATE DATABASE NAME&lt;/code&gt;；e.g&lt;code&gt;CREATE DATABASE whustd&lt;/code&gt;，创建一个名为 whustd的数据库。如果这个数据已经存在，那么会报错。但是 &lt;code&gt;CREATE DATABASE IF NOT EXISTS whustd&lt;/code&gt;，在名为 whustd 的数据库不存在时创建该库，这样可以避免报错。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;删除数据库：&lt;code&gt;DROP DATABASE [IF EXISTS] NAME&lt;/code&gt;；e.g DROP DATABASE &#x9; whustd，删除名为 WHUSTD 的数据库。如果这个数据库不存在，那么会报错。同理 &lt;code&gt;DROP DATABASE IF EXISTS WHUSTD&lt;/code&gt;，就算 WHUSTD不存在，也不会的报错。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;修改数据库编码：&lt;code&gt;ALTER DATABASE whustd CHARACTER SET utf8&lt;/code&gt;&#xA;修改数据库 WHUSTD 的编码为 utf8。注意，在 MySQL 中所有的 UTF-8 编码都&#xA;不能使用中间的&lt;code&gt;“-”&lt;/code&gt;，即 UTF-8 要书写为 UTF8。&#xA;修改编码一般是处理非英文内容的编译防止出现乱码。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
